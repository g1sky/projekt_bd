package bdapp.view;

import bdapp.AppWindow;
import bdapp.view.NavigateWindow;
import bdapp.view.AppPageView;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableModel;

public class WareManagementWindow extends AppPageView {

    /**
     * Creates new form WareManagementWindow
     */
    public WareManagementWindow(AppWindow parent) {
        super(parent);
        initComponents();

        wareTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableScrollPane = new javax.swing.JScrollPane();
        wareTable = new javax.swing.JTable();
        refreshButton = new javax.swing.JButton();
        addWareButton = new javax.swing.JButton();
        wareName = new javax.swing.JTextField();
        wareCategory = new javax.swing.JTextField();
        wareAmount = new javax.swing.JTextField();
        manageOfferButton = new javax.swing.JButton();
        updateWareDate = new javax.swing.JButton();
        removeWares = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        wareTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableScrollPane.setViewportView(wareTable);

        refreshButton.setText("Odśwież");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        addWareButton.setText("Dodaj");
        addWareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addWareButtonActionPerformed(evt);
            }
        });

        wareName.setText("nazwa towaru");

        wareCategory.setText("kategoria (id)");

        wareAmount.setText("ilość");

        manageOfferButton.setText("Zarządzaj ofertą");
        manageOfferButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageOfferButtonActionPerformed(evt);
            }
        });

        updateWareDate.setText("Aktualizuj");
        updateWareDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateWareDateActionPerformed(evt);
            }
        });

        removeWares.setText("Usuń");
        removeWares.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeWaresActionPerformed(evt);
            }
        });

        backButton.setText("Wróć");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(wareAmount)
                        .addComponent(wareCategory)
                        .addComponent(wareName, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE))
                    .addComponent(manageOfferButton)
                    .addComponent(backButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addWareButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeWares)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateWareDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 119, Short.MAX_VALUE)
                        .addComponent(refreshButton)
                        .addContainerGap())
                    .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshButton)
                    .addComponent(addWareButton)
                    .addComponent(updateWareDate)
                    .addComponent(removeWares))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(wareName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wareAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wareCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(manageOfferButton)
                        .addGap(137, 137, 137)
                        .addComponent(backButton))
                    .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        try {
            wareTable.setModel(getSession().getUserWares());
        } catch (SQLException ex) {
            Logger.getLogger(WareManagementWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void addWareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addWareButtonActionPerformed
        if (getSession().addWares(wareName.getText(), Double.parseDouble(wareAmount.getText()), Integer.parseInt(wareCategory.getText()))) {
            refresh();
        } else {
            JOptionPane.showMessageDialog(this, "Błąd dodawania towaru");
        }
    }//GEN-LAST:event_addWareButtonActionPerformed

    private void manageOfferButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageOfferButtonActionPerformed
        /*
        int i = wareTable.getSelectedRow();
        TableModel model = wareTable.getModel();
        String wareName = model.getValueAt(i, 1).toString();
        double wareAmount = Double.parseDouble(model.getValueAt(i, 2).toString());
         */
        //String wareName = model.getValueAt(i, 3).toString();

    }//GEN-LAST:event_manageOfferButtonActionPerformed

    private void updateWareDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateWareDateActionPerformed
        int i = wareTable.getSelectedRow();
        TableModel model = wareTable.getModel();

        int wareId = Integer.parseInt(model.getValueAt(i, 0).toString());
        String wareName = model.getValueAt(i, 1).toString();
        double wareAmount = Double.parseDouble(model.getValueAt(i, 2).toString());
        int wareCategory = Integer.parseInt(model.getValueAt(i, 3).toString());

        System.out.println("update ware: " + wareId + " " + wareName + " " + wareAmount + " " + wareCategory);
        if (getSession().updateWares(wareId, wareName, wareAmount, wareCategory)) {
            refresh();
        } else {
            JOptionPane.showMessageDialog(this, "Błąd aktualizacji danych towaru");
        }
    }//GEN-LAST:event_updateWareDateActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        getWindow().changeView(NavigateWindow.class);
    }//GEN-LAST:event_backButtonActionPerformed

    private void removeWaresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeWaresActionPerformed
        int i = wareTable.getSelectedRow();
        TableModel model = wareTable.getModel();
        String wareName = model.getValueAt(i, 1).toString();
        double wareAmount = Double.parseDouble(model.getValueAt(i, 2).toString());
        int wareCategory = Integer.parseInt(model.getValueAt(i, 3).toString());

        int wareId = Integer.parseInt(model.getValueAt(i, 0).toString());
        int confirm = JOptionPane.showOptionDialog(
                null, "Czy na pewno chcesz usunąć towar z bazy?\nid: " + wareId + "\nnazwa: " + wareName + "\nilość: " + wareAmount + "\nkategoria: " + wareCategory,
                "Potwierdzenie usunięcia", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (confirm == 0) {
            if (getSession().removeWares(wareId)) {
                refresh();
            } else {
                JOptionPane.showMessageDialog(this, "Błąd usuwania danych towaru");
            }
        }
    }//GEN-LAST:event_removeWaresActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addWareButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton manageOfferButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton removeWares;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JButton updateWareDate;
    private javax.swing.JTextField wareAmount;
    private javax.swing.JTextField wareCategory;
    private javax.swing.JTextField wareName;
    private javax.swing.JTable wareTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public void refresh() {
        try {
            wareTable.setModel(getSession().getUserWares());
        } catch (SQLException ex) {
            Logger.getLogger(WareManagementWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
