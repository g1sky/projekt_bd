-- Generated by Oracle SQL Developer Data Modeler 4.1.5.907
--   at:        2017-06-02 09:03:28 CEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g




CREATE TABLE Kategoria
  ( id NUMBER NOT NULL , nazwa VARCHAR2 (50) NOT NULL
  ) ;
CREATE INDEX kat_id_idx ON Kategoria
  ( id ASC
  ) ;
CREATE INDEX kat_nazwa_idx ON Kategoria
  ( nazwa ASC
  ) ;
ALTER TABLE Kategoria ADD CONSTRAINT kategoria_pk PRIMARY KEY ( id ) ;
ALTER TABLE Kategoria ADD CONSTRAINT nazwa_kat_un UNIQUE ( nazwa ) ;


CREATE TABLE Oferta
  (
    cena_jednostkowa NUMBER (15,3) NOT NULL ,
    ilosc            NUMBER (12,2) NOT NULL ,
    id_towaru        NUMBER NOT NULL
  ) ;
CREATE UNIQUE INDEX oferta_idx ON Oferta
  (
    id_towaru ASC , cena_jednostkowa ASC
  )
  ;


CREATE TABLE Towar
  (
    nazwa        VARCHAR2 (50) NOT NULL ,
    ilosc        NUMBER (12,2) NOT NULL ,
    wlasciciel   VARCHAR2 (40) ,
    id           NUMBER NOT NULL ,
    id_kategorii NUMBER
  ) ;
CREATE INDEX towar_id_idx ON Towar
  ( id ASC
  ) ;
CREATE INDEX towar_wlasciciel_idx ON Towar
  ( wlasciciel ASC
  ) ;
CREATE INDEX towar_kategoria_idx ON Towar
  ( id_kategorii ASC
  ) ;
CREATE INDEX towar_nazwa_idx ON Towar
  ( nazwa ASC
  ) ;
ALTER TABLE Towar ADD CONSTRAINT towar_pk PRIMARY KEY ( id ) ;


CREATE TABLE Towar_w_transakcji
  (
    id_transakcji    NUMBER NOT NULL ,
    id_towaru        NUMBER NOT NULL ,
    ilosc            NUMBER (12,2) NOT NULL ,
    cena_jednostkowa NUMBER (15,3) NOT NULL
  ) ;
CREATE INDEX twt_id_idx ON Towar_w_transakcji
  ( id_transakcji ASC
  ) ;
ALTER TABLE Towar_w_transakcji ADD CONSTRAINT twt_pk PRIMARY KEY ( id_transakcji, id_towaru ) ;


CREATE TABLE Transakcja
  (
    kupiec     VARCHAR2 (40) ,
    sprzedawca VARCHAR2 (40) ,
    stan       NUMBER (1) NOT NULL ,
    id         NUMBER NOT NULL
  ) ;
CREATE INDEX tr_kupiec_idx ON Transakcja
  ( kupiec ASC
  ) ;
CREATE INDEX tr_sprzedawca_idx ON Transakcja
  ( sprzedawca ASC
  ) ;
CREATE INDEX tr_id_idx ON Transakcja
  ( id ASC
  ) ;
ALTER TABLE Transakcja ADD CONSTRAINT transakcja_pk PRIMARY KEY ( id ) ;


CREATE TABLE Uzytkownik
  (
    imie        VARCHAR2 (30) NOT NULL ,
    nazwisko    VARCHAR2 (50) NOT NULL ,
    nickname    VARCHAR2 (40) NOT NULL ,
    haslo       VARCHAR2 (170) NOT NULL ,
    "e-mail"    VARCHAR2 (60) NOT NULL ,
    nr_telefonu NUMBER
  ) ;
CREATE INDEX uz_nick_idx ON Uzytkownik
  ( nickname ASC
  ) ;
CREATE INDEX uz_in_idx ON Uzytkownik
  ( imie ASC , nazwisko ASC
  ) ;
ALTER TABLE Uzytkownik ADD CONSTRAINT uzytkownik_pk PRIMARY KEY ( nickname ) ;


ALTER TABLE Towar ADD CONSTRAINT kategoria_fk FOREIGN KEY ( id_kategorii ) REFERENCES Kategoria ( id ) ;

ALTER TABLE Transakcja ADD CONSTRAINT kupiec_fk FOREIGN KEY ( kupiec ) REFERENCES Uzytkownik ( nickname ) ;

ALTER TABLE Transakcja ADD CONSTRAINT sprzedawca_fk FOREIGN KEY ( sprzedawca ) REFERENCES Uzytkownik ( nickname ) ;

ALTER TABLE Towar_w_transakcji ADD CONSTRAINT towar_fk FOREIGN KEY ( id_towaru ) REFERENCES Towar ( id ) ;

ALTER TABLE Oferta ADD CONSTRAINT towar_fk2 FOREIGN KEY ( id_towaru ) REFERENCES Towar ( id ) ;

ALTER TABLE Towar_w_transakcji ADD CONSTRAINT transakcja_fk FOREIGN KEY ( id_transakcji ) REFERENCES Transakcja ( id ) ;

ALTER TABLE Towar ADD CONSTRAINT wlasciciel_fk FOREIGN KEY ( wlasciciel ) REFERENCES Uzytkownik ( nickname ) ;

CREATE SEQUENCE Kategoria_id_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER Kategoria_id_TRG BEFORE
  INSERT ON Kategoria FOR EACH ROW WHEN (NEW.id IS NULL) BEGIN :NEW.id := Kategoria_id_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE Towar_id_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER Towar_id_TRG BEFORE
  INSERT ON Towar FOR EACH ROW WHEN (NEW.id IS NULL) BEGIN :NEW.id := Towar_id_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE Transakcja_id_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER Transakcja_id_TRG BEFORE
  INSERT ON Transakcja FOR EACH ROW WHEN (NEW.id IS NULL) BEGIN :NEW.id := Transakcja_id_SEQ.NEXTVAL;
END;
/

create or replace TRIGGER Oferta_ilosc_trg
BEFORE INSERT ON Oferta FOR EACH ROW
DECLARE
  t_ilosc towar.ilosc%TYPE;
BEGIN
SELECT ilosc INTO t_ilosc FROM towar WHERE id = :NEW.id_towaru;
IF :new.ilosc > t_ilosc OR :new.ilosc < 0 then
  RAISE VALUE_ERROR;
END IF;
END;
/

create or replace TRIGGER transakcja_ilosc_trg
BEFORE INSERT ON towar_w_transakcji FOR EACH ROW
DECLARE
  o_ilosc oferta.ilosc%TYPE;
BEGIN
SELECT ilosc INTO o_ilosc FROM oferta WHERE id_towaru = :NEW.id_towaru;
IF :new.ilosc > o_ilosc OR :new.ilosc < 0 then
  RAISE VALUE_ERROR;
END IF;
END;
/


create or replace FUNCTION add_to_cart
   (id_towaru_ IN INTEGER,
   ilosc_ IN NUMBER,
   kupiec_ IN VARCHAR)
RETURN BOOLEAN

AS

id_transakcji_ INTEGER;
sprzedawca_ VARCHAR(40);
cena_jednostkowa_ NUMBER;

BEGIN

    SELECT t.wlasciciel INTO sprzedawca_ -- poszukiwanie wlasciciela
      FROM g1_sgorski.towar t
      WHERE t.id = id_towaru_;
      
    SELECT o.cena_jednostkowa into cena_jednostkowa_ -- poszukiwanie ceny
      FROM g1_sgorski.oferta o
      WHERE o.id_towaru = id_towaru_;
      
    BEGIN -- poszukiwanie koszyka
      SELECT t.id into id_transakcji_
        FROM g1_sgorski.transakcja t
        WHERE t.sprzedawca = sprzedawca_ AND t.kupiec = kupiec_ AND t.stan = 0;
        
    EXCEPTION
      WHEN NO_DATA_FOUND THEN -- nie znalazl, wiec trzeba go dodac
        INSERT INTO g1_sgorski.transakcja (sprzedawca, kupiec, stan)
          VALUES (sprzedawca_, kupiec_, 0);
        SELECT t.id into id_transakcji_ -- i jeszcze raz szukamy
          FROM g1_sgorski.transakcja t
          WHERE t.sprzedawca = sprzedawca_ AND t.kupiec = kupiec_ AND t.stan = 0;
          
    END;
    
    BEGIN -- teraz dodawanie/aktualizacja towaru
      INSERT INTO g1_sgorski.towar_w_transakcji (id_transakcji, id_towaru, ilosc, cena_jednostkowa)
          VALUES (id_transakcji_, id_towaru_, ilosc_, cena_jednostkowa_);
          
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN -- jesli juz istnieje to tylko update
        UPDATE g1_sgorski.towar_w_transakcji
        SET ilosc = ilosc_, cena_jednostkowa = cena_jednostkowa_
        WHERE id_transakcji = id_transakcji_ AND id_towaru = id_towaru_;
        
    END;
    
RETURN TRUE;

EXCEPTION
  WHEN NO_DATA_FOUND THEN-- nie ma uzytkownika, ktory posiada towar o takim id lub nie ma takiego towaru, wiec trudno
    RETURN FALSE;
    
END add_to_cart;



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             6
-- CREATE INDEX                            13
-- ALTER TABLE                             13
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           3
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          3
-- CREATE MATERIALIZED VIEW                 0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
